@page "/daftar-menu-meja"
@inject RestoUnikom.Data.RepoResto RepoResto
@inject RestoUnikom.Data.IRepoRestoFactory RepoRestoFactory
@inject MudBlazor.ISnackbar Snackbar
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@inject MudBlazor.IDialogService DialogService
@inject IServiceScopeFactory ScopeFactory
@inject IJSRuntime JS
@using RestoUnikom.Data.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop

<PageTitle>Daftar Menu</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-md-4 mt-2 py-4">
    <MudText Typo="Typo.h4" Class="sticky-header mb-2" Color="Color.Primary">
        <MudIcon Icon="@Icons.Material.Filled.RestaurantMenu" Class="mr-2" />
        Daftar Menu
    </MudText>
    <MudTextField @bind-Value="teksPencarian" Placeholder="Cari menu..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Immediate="true" FullWidth="true" Class="sticky-header mb-4" />
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }
    else if (menus == null || !menus.Any())
    {
        <MudAlert Severity="Severity.Info">Tidak ada menu tersedia.</MudAlert>
    }
    else
    {
        <MudTabs @bind-ActivePanelIndex="activeTabIndex" Rounded="true" Class="mb-2" Color="Color.Primary" Elevation="2">
            @foreach (var kategori in FilteredKategori())
            {
                <MudTabPanel Text="@kategori">
                    <div style="position:relative;">
                        <div class="menu-list-container" @ref="menuListRef">
                            <MudGrid Spacing="4">
                                @foreach (var menu in FilteredMenusByKategori(kategori))
                                {
                                    <MudItem xs="12" sm="6" md="4" lg="3">
                                        <MudCard Class="menu-card-equal-height">
                                            <div class="menu-image-container">
                                                <MudChip T="string" Color="@(menu.StokTersedia > 0 ? Color.Success : Color.Error)" Variant="Variant.Filled" Class="stock-badge">
                                                    <MudIcon Icon="@Icons.Material.Filled.Inventory2" Size="Size.Small" Class="mr-1" />
                                                    @menu.StokTersedia
                                                </MudChip>
                                                <MudCardMedia Image="@menu.GambarMenu" Height="180" Class="menu-image" />
                                                <AuthorizeView Roles="Pelayan,Admin">
                                                    <Authorized>
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(menu.StokTersedia <= 0)" OnClick="async () => await BukaDialogPemesanan(menu)" StartIcon="@Icons.Material.Filled.AddShoppingCart" Class="menu-pilih-btn">
                                                        </MudButton>
                                                    </Authorized>
                                                </AuthorizeView>
                                            </div>
                                            <MudCardContent>
                                                <MudText Typo="Typo.subtitle1" Class="menu-title">@menu.NamaMenu</MudText>
                                                <MudText Typo="Typo.body2" Class="menu-description">@menu.Deskripsi</MudText>
                                                <AuthorizeView Roles="Koki,Admin">
                                                    <Authorized>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo($"/form-menu?menuId={menu.MenuId}", true))" StartIcon="@Icons.Material.Filled.Edit" Class="mt-1">
                                                            Edit Menu
                                                        </MudButton>
                                                    </Authorized>
                                                </AuthorizeView>
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        </div>
                    </div>
                </MudTabPanel>
            }
        </MudTabs>
    }
</MudContainer>

@code {
    private string teksPencarian = string.Empty;
    private bool isLoading = true;
    private List<Menu> menus = new();
    private List<Meja> mejasKosong = new();
    private int? mejaTerpilihId;
    private List<IsiKeranjang> keranjang = new();
    private int pegawaiId = 0;
    private string? namaPegawai;
    private HubConnection? hubConnection;
    private HubConnection? hubConnectionMeja;
    private bool _disposed = false;
    private int activeTabIndex = 0;
    private ElementReference menuListRef;

    private IEnumerable<IGrouping<string, Menu>> GroupedMenus()
    {
        var filtered = FilteredMenus();
        return filtered.GroupBy(m => string.IsNullOrWhiteSpace(m.Kategori) ? "Lainnya" : m.Kategori)
                        .OrderBy(g => g.Key);
    }

    private IEnumerable<Menu> FilteredMenus()
    {
        if (string.IsNullOrWhiteSpace(teksPencarian))
            return menus;
        return menus.Where(m => m.NamaMenu.Contains(teksPencarian, StringComparison.OrdinalIgnoreCase));
    }

    private IEnumerable<string> FilteredKategori()
    {
        return GroupedMenus().Select(g => g.Key);
    }

    private IEnumerable<Menu> FilteredMenusByKategori(string kategori)
    {
        return GroupedMenus().FirstOrDefault(g => g.Key == kategori) ?? Enumerable.Empty<Menu>();
    }

    private async Task BukaDialogPemesanan(Menu menu)
    {
        var parameters = new MudBlazor.DialogParameters { ["Menu"] = menu };
        var options = new MudBlazor.DialogOptions { MaxWidth = MudBlazor.MaxWidth.Small, CloseOnEscapeKey = true, FullWidth = true };
        var dialog = DialogService.Show<PemesananDialog>("Pesan Menu", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is ValueTuple<int, string> data)
        {
            TambahKeKeranjang(menu, data.Item1, data.Item2);
        }
    }

    private void TambahKeKeranjang(Menu menu, int jumlah, string catatan)
    {
        var existing = keranjang.FirstOrDefault(x => x.Menu.MenuId == menu.MenuId && x.Catatan == catatan);
        if (existing != null)
        {
            if (existing.Jumlah + jumlah <= menu.StokTersedia)
                existing.Jumlah += jumlah;
            else
                existing.Jumlah = menu.StokTersedia;
        }
        else
        {
            keranjang.Add(new IsiKeranjang { Menu = menu, Jumlah = jumlah, Catatan = catatan });
        }
        Snackbar.Add($"{menu.NamaMenu} ditambahkan ke keranjang!", MudBlazor.Severity.Success);
    }

    private async Task BuatPesanan()
    {
        var mejaTerpilih = mejasKosong.FirstOrDefault(m => m.MejaId == mejaTerpilihId);
        if (keranjang.Count == 0 || mejaTerpilih == null)
        {
            Snackbar.Add("Pilih menu dan meja terlebih dahulu!", MudBlazor.Severity.Error);
            return;
        }
        if (pegawaiId == 0)
        {
            Snackbar.Add("Pegawai tidak valid! Silakan login ulang.", MudBlazor.Severity.Error);
            return;
        }
        var items = keranjang.Select(x => (x.Menu.MenuId, x.Jumlah, x.Catatan)).ToList();
        var pesanan = await RepoResto.CreatePesananAsync(mejaTerpilih.MejaId, pegawaiId, items);
        if (pesanan != null)
        {
            Snackbar.Add("Pesanan berhasil dibuat!", MudBlazor.Severity.Success);
            keranjang.Clear();
            menus = await RepoResto.GetAllMenusAsync();
            mejasKosong = await RepoResto.GetMejasKosongAtauDitempatiAsync();
            StateHasChanged();
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("BroadcastMenuStokChanged");
            }
            if (hubConnectionMeja != null && hubConnectionMeja.State == HubConnectionState.Connected)
            {
                await hubConnectionMeja.SendAsync("BroadcastPesananChanged", pesanan.PesananId);
            }
            Navigation.NavigateTo($"/pesanan-meja/{mejaTerpilih.MejaId}");
        }
        else
        {
            Snackbar.Add("Gagal membuat pesanan!", MudBlazor.Severity.Error);
        }
    }

    private async Task RefreshMejaKosongAsync()
    {
        mejasKosong = await RepoResto.GetMejasKosongAtauDitempatiAsync();
        StateHasChanged();
    }

    private void OnMejaTerpilihChanged()
    {
        // Optional: logic jika perlu
    }

    private void HapusIsiKeranjang(IsiKeranjang item)
    {
        keranjang.Remove(item);
    }

    private async Task ShowKeranjangDialog()
    {
        var keranjangPublic = keranjang.Select(x => new KeranjangDialog.IsiKeranjangPublic
        {
            Menu = x.Menu,
            Jumlah = x.Jumlah,
            Catatan = x.Catatan
        }).ToList();
        var parameters = new MudBlazor.DialogParameters
        {
            ["Keranjang"] = keranjangPublic,
            ["MejasKosong"] = mejasKosong,
            ["MejaTerpilihId"] = mejaTerpilihId,
            ["MejaTerpilihIdChanged"] = EventCallback.Factory.Create<int?>(this, (int? id) => mejaTerpilihId = id),
            ["OnHapusIsiKeranjang"] = EventCallback.Factory.Create<KeranjangDialog.IsiKeranjangPublic>(this, (KeranjangDialog.IsiKeranjangPublic item) =>
            {
                var toRemove = keranjang.FirstOrDefault(k => k.Menu.MenuId == item.Menu.MenuId && k.Catatan == item.Catatan);
                if (toRemove != null) keranjang.Remove(toRemove);
            }),
            ["OnBuatPesanan"] = EventCallback.Factory.Create(this, BuatPesanan)
        };
        var options = new MudBlazor.DialogOptions { MaxWidth = MudBlazor.MaxWidth.Medium, CloseOnEscapeKey = true, FullWidth = true };
        DialogService.Show<KeranjangDialog>("Keranjang", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var username = user.Identity.Name;
            if (!string.IsNullOrEmpty(username))
            {
                var pegawai = await RepoResto.GetPegawaiByNamaPengguna(username);
                if (pegawai != null)
                {
                    pegawaiId = pegawai.PegawaiId;
                    namaPegawai = pegawai.NamaPegawai;
                }
            }
        }
        menus = await RepoResto.GetAllMenusAsync() ?? new List<Menu>();
        mejasKosong = await RepoResto.GetMejasKosongAtauDitempatiAsync() ?? new List<Meja>();
        await InitSignalR();
        await InitSignalRMeja();
        isLoading = false;
    }

    private async Task InitSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/restohub"))
            .WithAutomaticReconnect()
            .Build();
        hubConnection.On("MenuStokChanged", async () =>
        {
            if (_disposed) return;
            try
            {
                using var scope = ScopeFactory.CreateScope();
                var repo = scope.ServiceProvider.GetRequiredService<RestoUnikom.Data.RepoResto>();
                menus = await repo.GetAllMenusAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch (ObjectDisposedException) { /* ignore */ }
            catch (Exception ex)
            {
                Snackbar.Add($"Gagal reload menu: {ex.Message}", MudBlazor.Severity.Error);
            }
        });
        await hubConnection.StartAsync();
    }

    private async Task InitSignalRMeja()
    {
        hubConnectionMeja = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/restohub"))
            .WithAutomaticReconnect()
            .Build();
        await hubConnectionMeja.StartAsync();
    }

    private Meja mejaSelected => mejasKosong?.FirstOrDefault(m => m.MejaId == mejaTerpilihId);

    private class IsiKeranjang
    {
        public Menu Menu { get; set; } = default!;
        public int Jumlah { get; set; }
        public string Catatan { get; set; } = string.Empty;
    }

    public async ValueTask DisposeAsync()
    {
        _disposed = true;
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
        if (hubConnectionMeja != null)
            await hubConnectionMeja.DisposeAsync();
    }
}