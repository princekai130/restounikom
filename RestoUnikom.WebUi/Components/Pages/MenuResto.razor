@page "/menu"
@inject RestoUnikom.Data.RepositoriResto Repo

@using MudBlazor

<PageTitle>Menu Restoran</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-4">
    <!-- Header Section -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h4" Class="mb-3" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Restaurant" Class="mr-2" />
            Menu Restoran
        </MudText>

        <!-- Search Bar -->
        <MudTextField @bind-Value="searchText"
                      Placeholder="Cari menu berdasarkan nama atau deskripsi..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      FullWidth="true"
                      Class="mb-2" />

        @if (!string.IsNullOrWhiteSpace(searchText))
        {
            <MudText Typo="Typo.body2" Color="Color.Info">
                Hasil pencarian untuk: "<b>@searchText</b>"
            </MudText>
        }
    </MudPaper>

    @if (menusByKategori == null)
    {
        <MudPaper Class="pa-8 text-center" Elevation="1">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.h6" Class="mt-4">Memuat menu...</MudText>
        </MudPaper>
    }
    else if (!menusByKategori.Any())
    {
        <MudAlert Severity="Severity.Info" Class="ma-4">
            <MudText>Tidak ada menu yang tersedia saat ini.</MudText>
        </MudAlert>
    }
    else
    {
        <MudPaper Elevation="1">
            <MudTabs @bind-ActivePanelIndex="activeTabIndex"
                     Elevation="0"
                     Rounded="false"
                     Border="true"
                     HeaderClass="mud-tabs-header-custom"
                     PanelClass="pa-4">

                @foreach (var kategori in kategoriList)
                {
                    var filteredMenus = FilteredMenusByKategori(kategori).ToList();
                    var menuCount = filteredMenus.Count;

                    <MudTabPanel Text="@GetTabTitle(kategori, menuCount)">
                        <ChildContent>
                            @if (!filteredMenus.Any())
                            {
                                <MudAlert Severity="Severity.Info" Class="ma-2">
                                    @if (string.IsNullOrWhiteSpace(searchText))
                                    {
                                        <MudText>Tidak ada menu dalam kategori @kategori.</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Tidak ada menu yang cocok dengan pencarian "@searchText" dalam kategori @kategori.</MudText>
                                    }
                                </MudAlert>
                            }
                            else
                            {
                                <!-- Grid dengan card yang seragam -->
                                <MudGrid Spacing="4" Justify="Justify.FlexStart">
                                    @foreach (var menu in filteredMenus)
                                    {
                                        <MudItem xs="12" sm="6" md="4" lg="3" xl="3">
                                            <MudCard Class="menu-card">
                                                <!-- Card Media dengan aspect ratio tetap -->
                                                <div class="menu-image-container">
                                                    @if (!string.IsNullOrEmpty(menu.GambarMenu))
                                                    {
                                                        <MudCardMedia Image="@menu.GambarMenu"
                                                                      Alt="@menu.NamaMenu"
                                                                      Class="menu-image" />
                                                    }
                                                    else
                                                    {
                                                        <div class="menu-image-placeholder">
                                                            <MudIcon Icon="@Icons.Material.Filled.Restaurant"
                                                                     Size="Size.Large"
                                                                     Color="Color.Default" />
                                                        </div>
                                                    }

                                                    <!-- Stock badge overlay -->
                                                    <div class="stock-badge">
                                                        <MudChip T="string"
                                                                 Size="Size.Small"
                                                                 Color="@(menu.StokTersedia > 0 ? Color.Success : Color.Error)"
                                                                 Variant="Variant.Filled">
                                                            Stok: @menu.StokTersedia
                                                        </MudChip>
                                                    </div>
                                                </div>

                                                <!-- Card Content dengan tinggi tetap -->
                                                <MudCardContent Class="menu-card-content">
                                                    <div class="menu-info">
                                                        <MudText Typo="Typo.h6" Class="menu-title">@menu.NamaMenu</MudText>
                                                        <MudText Typo="Typo.body2" Class="menu-description">
                                                            @(string.IsNullOrEmpty(menu.Deskripsi) ? "Tidak ada deskripsi" : menu.Deskripsi)
                                                        </MudText>
                                                    </div>

                                                    <div class="menu-price">
                                                        <MudText Typo="Typo.h6" Color="Color.Primary">
                                                            <b>Rp @menu.Harga.ToString("N0")</b>
                                                        </MudText>
                                                    </div>
                                                </MudCardContent>

                                                <!-- Card Actions -->
                                                <MudCardActions Class="pa-3">
                                                    <MudButton Variant="Variant.Filled"
                                                               Color="Color.Primary"
                                                               FullWidth="true"
                                                               Disabled="@(menu.StokTersedia <= 0)"
                                                               StartIcon="@Icons.Material.Filled.AddShoppingCart">
                                                        @(menu.StokTersedia > 0 ? "Pesan" : "Habis")
                                                    </MudButton>
                                                </MudCardActions>
                                            </MudCard>
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                        </ChildContent>
                    </MudTabPanel>
                }
            </MudTabs>
        </MudPaper>
    }
</MudContainer>

<style>
    /* Custom styling untuk tabs */
    .mud-tabs-header-custom {
        background-color: var(--mud-palette-surface);
        border-bottom: 1px solid var(--mud-palette-divider);
    }

    /* Menu card styling */
    .menu-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
    }

        .menu-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

    /* Image container dengan aspect ratio tetap */
    .menu-image-container {
        position: relative;
        width: 100%;
        height: 200px;
        overflow: hidden;
    }

    .menu-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .menu-image-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--mud-palette-grey-lighten4);
        color: var(--mud-palette-grey-darken1);
    }

    /* Stock badge overlay */
    .stock-badge {
        position: absolute;
        top: 8px;
        right: 8px;
    }

    /* Card content dengan flex layout */
    .menu-card-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        min-height: 140px;
    }

    .menu-info {
        flex: 1;
    }

    .menu-title {
        margin-bottom: 8px;
        line-height: 1.3;
        height: 2.6em;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .menu-description {
        color: var(--mud-palette-text-secondary);
        line-height: 1.4;
        height: 2.8em;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        margin-bottom: 12px;
    }

    .menu-price {
        margin-top: auto;
        padding-top: 8px;
        border-top: 1px solid var(--mud-palette-divider);
    }
</style>

@code {
    private Dictionary<string, List<RestoUnikom.Data.Models.Menu>>? menusByKategori;
    private List<string> kategoriList = new();
    private int activeTabIndex = 0;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var menus = await Repo.GetMenusStokTersediaAsync();
            if (menus != null && menus.Any())
            {
                menusByKategori = menus
                    .GroupBy(m => string.IsNullOrEmpty(m.Kategori) ? "Lainnya" : m.Kategori)
                    .ToDictionary(g => g.Key, g => g.ToList());
                kategoriList = menusByKategori.Keys.OrderBy(k => k).ToList();
            }
            else
            {
                menusByKategori = new Dictionary<string, List<RestoUnikom.Data.Models.Menu>>();
                kategoriList = new List<string>();
            }
        }
        catch (Exception ex)
        {
            // Log error atau tampilkan pesan error
            Console.WriteLine($"Error loading menus: {ex.Message}");
            menusByKategori = new Dictionary<string, List<RestoUnikom.Data.Models.Menu>>();
            kategoriList = new List<string>();
        }
    }

    /// <summary>
    /// Menyaring menu berdasarkan kategori dan teks pencarian. 
    /// </summary>
    /// <param name="kategori"></param>
    /// <returns></returns>
    private IEnumerable<RestoUnikom.Data.Models.Menu> FilteredMenusByKategori(string kategori)
    {
        if (menusByKategori == null || !menusByKategori.ContainsKey(kategori))
            return Enumerable.Empty<RestoUnikom.Data.Models.Menu>();

        var menus = menusByKategori[kategori];
        if (string.IsNullOrWhiteSpace(searchText))
            return menus;

        return menus.Where(m =>
            (!string.IsNullOrEmpty(m.NamaMenu) && m.NamaMenu.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(m.Deskripsi) && m.Deskripsi.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        );
    }

    /// <summary>
    /// Mengambil ikon kategori berdasarkan nama kategori.
    /// </summary>
    /// <param name="kategori"></param>
    /// <returns></returns>
    private string GetKategoriIcon(string kategori)
    {
        return kategori.ToLower() switch
        {
            "makanan utama" or "main course" => Icons.Material.Filled.Restaurant,
            "minuman" or "drinks" => Icons.Material.Filled.LocalBar,
            "dessert" or "penutup" => Icons.Material.Filled.Cake,
            "appetizer" or "pembuka" => Icons.Material.Filled.RoomService,
            "snack" => Icons.Material.Filled.Fastfood,
            _ => Icons.Material.Filled.MenuBook
        };
    }

    /// <summary>
    /// Membuat judul tab dengan kategori dan jumlah menu.
    /// </summary>
    /// <param name="kategori"></param>
    /// <param name="count"></param>
    /// <returns></returns>
    private string GetTabTitle(string kategori, int count)
    {
        return $"{kategori} ({count})";
    }
}